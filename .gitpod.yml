---
# Gitpod Configuration for OpenCog Cognitive Ecosystem
# Complete one-click deployment solution with automated Guix build &
# deploy process
# Addresses issue #69: docker pull
# gitpod/workspace-python-3.10:2025-07-23-06-50-33
# Part of madness meta-issue #68

image:
  file: .gitpod.Dockerfile

# Configure the workspace with automated deployment and comprehensive
# error handling
tasks:
  - name: "Environment Setup"
    init: |
      echo "🔧 Initializing OpenCog Cognitive Ecosystem Environment..."
      # Run setup with timeout protection
      timeout 60 ./.gitpod/setup.sh || echo "Setup completed with warnings"
    command: |
      echo "✅ Environment setup completed"
      echo "Ready for main deployment..."

  - name: "Main Deployment"
    init: |
      echo "🚀 Starting automated deployment with Guix integration..."
      # Run deployment with timeout protection and fallback
      timeout 180 ./.gitpod/deploy.sh || {
        echo "⚠️  Main deployment timed out, starting lightweight mode..."
        echo "🔧 Setting up minimal working environment..."
        
        # Minimal setup that should always work
        chmod +x *.sh *.scm 2>/dev/null || true
        mkdir -p /tmp/opencog-workspace $HOME/models $HOME/koboldcpp
        
        # Start minimal server
        echo "Starting minimal server on port 5001..."
        nohup python3 -m http.server 5001 > /tmp/koboldcpp.log 2>&1 &
        echo $! > /tmp/koboldcpp.pid
        
        echo "$(date '+%Y-%m-%d %H:%M:%S') - Lightweight deployment completed" > /tmp/deployment-status.txt
        echo "lightweight-mode-ready" >> /tmp/deployment-status.txt
      }
    command: |
      echo ""
      echo "🧠 OpenCog Cognitive Ecosystem Ready!"
      echo "=================================================="
      echo ""
      
      # Check deployment status
      if [ -f /tmp/deployment-status.txt ] && grep -q "lightweight-mode" /tmp/deployment-status.txt; then
        echo "⚡ Running in Lightweight Mode"
        echo "🌐 Minimal Services:"
        echo "  • Basic Web Server: Port 5001 (auto-forwarded)"
        echo "  • Scripts available: ./ocpkg, ./koboldcpp-setup.sh"
        echo ""
        echo "🚀 To enable full features:"
        echo "  • Run: ./.gitpod/deploy.sh"
        echo "  • Or: ./koboldcpp-setup.sh"
      else
        echo "🌐 Available Services:"
        echo "  • KoboldCpp Web Interface: Port 5001 (auto-forwarded)"
        echo "  • Cognitive Grammar Agent:" \
             "./cognitive-grammar-integration-agent.scm"
        echo "  • Package Management: ./ocpkg"
      fi
      echo ""
      echo "🚀 Quick Start Commands:"
      echo "  • Test cognitive pipeline: ./test-cognitive-flowchart.sh"
      echo "  • Run demo: ./demo-cognitive-flowchart.sh"
      echo "  • Check deployment status: cat /tmp/deployment-status.txt"
      echo "  • View logs: tail -f /tmp/opencog-deploy.log"
      echo ""
      echo "📚 Documentation:"
      echo "  • Deployment Guide: .gitpod/README.md"
      echo "  • Troubleshooting: .gitpod/TROUBLESHOOTING.md"
      echo "  • Architecture: TECHNICAL-ARCHITECTURE.md"
      echo ""
      echo "🎯 Environment ready for cognitive development!"

  - name: "KoboldCpp Server (Background)"
    command: |
      echo "⏳ Waiting for deployment to complete..."
      # Wait for main deployment to finish
      while [ ! -f /tmp/deployment-status.txt ] || \
           ! grep -q "completed" /tmp/deployment-status.txt; do
        sleep 5
        echo "Waiting for deployment..."
      done
      echo "🚀 KoboldCpp server starting automatically..."
      # Server started by deploy.sh, this task just monitors
      tail -f /tmp/koboldcpp.log 2>/dev/null || \
           echo "KoboldCpp logs will appear here..."

# Port configuration for KoboldCpp server
ports:
  - port: 5001
    onOpen: open-browser
    name: "KoboldCpp Web Interface"
    description: "Language model inference server with web UI"
    protocol: http

# GitHub integration
github:
  prebuilds:
    master: true
    branches: true
    pullRequests: true
    addCheck: true
    addComment: true
    addBadge: true

# VS Code extensions for development
vscode:
  extensions:
    - ms-python.python
    - ms-python.flake8
    - ms-vscode.makefile-tools
    - redhat.vscode-yaml
    - ms-vscode.vscode-json
    - formulahendry.auto-rename-tag

# Environment variables
env:
  OPENCOG_ECOSYSTEM: "true"
  KOBOLDCPP_PORT: "5001"
  COGNITIVE_GRAMMAR_AGENT: "distributed-cognitive-grammar-agent.scm"
  GITPOD_WORKSPACE_TYPE: "cognitive-ecosystem"
