# .github/workflows/ci-org-v7a.yml

name: CI Org v7a

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

env:
  CCACHE_DIR: /ws/ccache
  MAKEFLAGS: -j$(nproc)

jobs:
  build-and-test:
    name: Build and Test All Components
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
      env:
        CCACHE_DIR: /ws/ccache
        MAKEFLAGS: -j$(nproc)
    services:
      opencog-postgres:
        image: opencog/postgres
        env:
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
          POSTGRES_DB: atomspace_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # 0. Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 1. Install Build Dependencies
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache pkg-config cmake build-essential git guile-3.0-dev valgrind doxygen graphviz
          sudo apt-get update
          sudo apt-get install -y libboost-all-dev librocksdb-dev liboctomap-dev libcpprest-dev libssl-dev liboctomap-dev
          sudo apt-get update
          sudo apt-get install -y python3 python3-dev python3-pip python3-nose cython3
          sudo apt-get update
          sudo apt-get install -y gnupg gnupg-l10n gnupg-utils gpg-wks-client gpgsm keyboxd
          sudo apt-get update
          sudo apt-get install -y curl lsb-release
#          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key | apt-key add -
#          sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
#          sudo apt-get update
#          sudo apt-get install -y python3-rospy python3-catkin-tools

      # 2. Install Cython Dependencies
      - name: Install Cython dependencies
        run: |
          python3 -m venv ~/myvenv
          source ~/myvenv/bin/activate
          pip install --upgrade pip setuptools wheel cython rospy catkin-tools

#          python3 -m pip install --upgrade pip setuptools wheel
#          python3 -m cython --version
#          python3 -m pip install --upgrade pip cython

      # 3. Build and Install CogUtil
      - name: Build and Install CogUtil
        run: |
          # Use local repository from monorepo
          mkdir -p repos/cogutil/build
          cd repos/cogutil/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 4. Build and Install AtomSpace
      - name: Build and Install AtomSpace
        run: |
          # Use local repository from monorepo
          mkdir -p repos/atomspace/build
          cd repos/atomspace/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 5. Build and Install CogServer
      - name: Build and Install CogServer
        run: |
          # Use local repository from monorepo
          mkdir -p repos/cogserver/build
          cd repos/cogserver/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 6. Build and Install OpenCog
      - name: Build and Install OpenCog
        run: |
          # Use local repository from monorepo
          mkdir -p repos/opencog/build
          cd repos/opencog/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 7. Build and Install AsmoSES
      - name: Build and Install AsmoSES
        run: |
          # Use local repository from monorepo
          mkdir -p repos/asmoses/build
          cd repos/asmoses/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 8. Build and Install URE
      - name: Build and Install URE
        run: |
          # Use local repository from monorepo
          mkdir -p repos/ure/build
          cd repos/ure/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 9. Build and Install Unify
      - name: Build and Install Unify
        run: |
          # Use local repository from monorepo
          mkdir -p repos/unify/build
          cd repos/unify/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 10. Build and Install Attention
      - name: Build and Install Attention
        run: |
          # Use local repository from monorepo
          mkdir -p repos/attention/build
          cd repos/attention/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 11. Build and Install Miner
      - name: Build and Install Miner
        run: |
          # Use local repository from monorepo
          mkdir -p repos/miner/build
          cd repos/miner/build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 12. Run Tests for Each Component
      - name: Run Tests
        run: |
          # AtomSpace Tests
          cd repos/atomspace/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # CogServer Tests
          cd repos/cogserver/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # OpenCog Tests
          cd repos/opencog/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # AsmoSES Tests
          cd repos/asmoses/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # URE Tests
          cd repos/ure/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # Unify Tests
          cd repos/unify/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # Attention Tests
          cd repos/attention/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

          # Miner Tests
          cd repos/miner/build
          make tests
          make check ARGS="$MAKEFLAGS"
          cd ../../..

      # 13. Upload Test Logs
      - name: Upload Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            repos/atomspace/build/Testing/Temporary/LastTest.log
            repos/cogserver/build/Testing/Temporary/LastTest.log
            repos/opencog/build/Testing/Temporary/LastTest.log
            repos/asmoses/build/Testing/Temporary/LastTest.log
            repos/ure/build/Testing/Temporary/LastTest.log
            repos/unify/build/Testing/Temporary/LastTest.log
            repos/attention/build/Testing/Temporary/LastTest.log
            repos/miner/build/Testing/Temporary/LastTest.log

      # 14. (Optional) Package Components
      - name: Package Components
        if: github.ref == 'refs/heads/main'
        run: |
          # AtomSpace Packaging
          cd repos/atomspace/build
          make package || echo "AtomSpace package target not defined."
          cd ../../..

          # Repeat packaging for other components as needed

      # 15. Upload Build Artifacts
      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            repos/cogutil/build/
            repos/atomspace/build/
            repos/cogserver/build/
            repos/opencog/build/
            repos/asmoses/build/
            repos/ure/build/
            repos/unify/build/
            repos/attention/build/
            repos/miner/build/
