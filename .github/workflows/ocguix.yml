# .github/workflows/ocguix.yml
# Workflow for building and installing OpenCog components with Guix & Shepherd integration

name: OCGuix

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CCACHE_DIR: /ws/ccache
  MAKEFLAGS: -j$(nproc)
  GUIX_PROFILE: /var/guix/profiles/per-user/root/current-guix

jobs:
  build-and-test:
    name: Build and Test All Components
    runs-on: ubuntu-latest
    container:
      image: opencog/opencog-deps
      options: --user root
      env:
        CCACHE_DIR: /ws/ccache
        MAKEFLAGS: -j$(nproc)
    services:
      opencog-postgres:
        image: opencog/postgres
        env:
          POSTGRES_USER: opencog_test
          POSTGRES_PASSWORD: cheese
          POSTGRES_DB: atomspace_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Fix Git Ownership Issue
      - name: Set Git Safe Directory
        run: |
          git config --global --add safe.directory ${{ github.workspace }}
          git config --global --add safe.directory /__w/skincoguix/skincoguix

      # Vendor cogutil for Guix environment purity
      - name: Vendor cogutil (Guix Compatible)
        run: |
          echo "üß† Vendoring cogutil for Guix environment purity..."
          
          # Idempotent vendoring: Only clone if cogutil is missing
          if [ ! -d "cogutil" ]; then
            echo "üì¶ Cloning cogutil from upstream..."
            git clone https://github.com/opencog/cogutil.git cogutil
            echo "üßπ Removing .git directory for Guix purity..."
            rm -rf cogutil/.git
            echo "‚úÖ Cogutil vendored successfully"
          else
            echo "‚úÖ Cogutil already present, skipping vendoring"
          fi
          
          # Critical validation: Ensure CMakeLists.txt exists
          if [ ! -f "cogutil/CMakeLists.txt" ]; then
            echo "‚ùå ERROR: cogutil/CMakeLists.txt missing after vendoring!"
            exit 1
          fi
          
          echo "‚úÖ Cogutil vendoring validation passed"

      # Setup Guix Environment
      - name: Setup Guix Environment
        run: |
          echo "üîß Installing Guix for reproducible builds..."
          
          # Install Guix
          wget -q https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
          chmod +x guix-install.sh
          yes "" | sudo ./guix-install.sh || true
          
          # Setup environment paths
          export PATH="/var/guix/profiles/per-user/root/current-guix/bin:$PATH"
          
          # Verify Guix installation
          if command -v guix &> /dev/null; then
            echo "‚úÖ Guix installed successfully: $(guix --version | head -1)"
          else
            echo "‚ö†Ô∏è Guix installation may be incomplete, but continuing..."
          fi

      # Validate Guix Integration and Repository Structure
      - name: Validate Guix Integration and Repository Structure
        run: |
          echo "üîç Validating Guix/Shepherd integration..."
          
          # Run the validation script
          ./validate-ocguix-workflow.sh || echo "‚ö†Ô∏è Some validations failed, but continuing build..."
          
          # Validate cognitive-manifest.scm can be processed
          if command -v guix &> /dev/null; then
            echo "üìã Testing cognitive-manifest.scm with Guix..."
            guix install --dry-run -m cognitive-manifest.scm || echo "‚ö†Ô∏è Manifest validation failed"
          fi
          
          # Run cognitive validation if available
          if [ -f validate-cogutil-scheme.scm ]; then
            echo "üß† Running cognitive validation..."
            guile -s validate-cogutil-scheme.scm || echo "‚ö†Ô∏è Cognitive validation completed with warnings"
          fi

      # Setup Local PostgreSQL with Root Access
      - name: Setup Local PostgreSQL with Root Access
        run: |
          echo "üóÑÔ∏è Setting up PostgreSQL..."
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
          sudo systemctl start postgresql
          sudo -u postgres createuser --superuser opencog_test || true
          sudo -u postgres psql -c "ALTER USER opencog_test PASSWORD 'cheese';" || true
          sudo -u postgres createdb atomspace_db -O opencog_test || true

      # Clone Missing OpenCog Repositories 
      - name: Clone Missing OpenCog Repositories
        run: |
          echo "üì¶ Ensuring OpenCog repositories are available..."
          mkdir -p repos
          cd repos
          
          # List of required repositories
          REPOS=(
            "cogutil" "atomspace" "atomspace-storage" "atomspace-rocks"
            "atomspace-restful" "cogserver" "unify" "ure" "spacetime"
            "attention" "miner" "pln" "asmoses" "lg-atomese" "learn" "vision" "opencog"
          )
          
          for repo in "${REPOS[@]}"; do
            if [ ! -d "$repo" ]; then
              echo "Cloning $repo..."
              git clone "https://github.com/opencog/$repo.git" || echo "‚ö†Ô∏è Failed to clone $repo"
            else
              echo "‚úÖ $repo already exists"
            fi
          done
          cd ..

      # Install Build Dependencies (Guix-compatible approach)
      - name: Install Build Dependencies
        run: |
          echo "üì¶ Installing build dependencies..."
          
          # Use Guix for dependency management where possible
          if command -v guix &> /dev/null; then
            echo "üîß Using Guix for dependencies..."
            # Install from cognitive-manifest.scm
            guix install -m cognitive-manifest.scm || echo "‚ö†Ô∏è Guix installation partial"
          fi
          
          # Fallback to apt-get for system dependencies not in Guix
          echo "üîß Installing system dependencies..."
          sudo apt-get update
          sudo apt-get install -y ccache pkg-config cmake build-essential git guile-3.0-dev valgrind doxygen graphviz
          sudo apt-get install -y libboost-all-dev librocksdb-dev liboctomap-dev libcpprest-dev libssl-dev
          sudo apt-get install -y python3 python3-dev python3.12-dev python3-pip python3-venv python3-nose cython3
          sudo apt-get install -y gnupg gnupg-l10n gnupg-utils gpg-wks-client gpgsm keyboxd
          sudo apt-get install -y curl lsb-release

      # 2. Install Cython Dependencies
      - name: Install Cython dependencies
        run: |
          python3 -m venv ~/myvenv
          source ~/myvenv/bin/activate
          pip install --upgrade pip setuptools wheel cython
        shell: bash

      # Initialize Shepherd Services (if available)
      - name: Initialize Shepherd Services
        run: |
          echo "üõ†Ô∏è Setting up Shepherd services..."
          
          # Check if shepherd is available
          if command -v shepherd &> /dev/null; then
            echo "‚úÖ Shepherd found, starting services..."
            shepherd -c .config/shepherd/init.scm &
            sleep 2
            
            # Start cogutil vendor service
            herd start cogutil-vendor || echo "‚ö†Ô∏è Cogutil vendor service not started"
          else
            echo "‚ö†Ô∏è Shepherd not available, skipping service initialization"
            echo "üìù Running cogutil vendoring manually..."
            
            # Manual cogutil vendoring since Shepherd service isn't available
            if [ -f demo-guix-vendor-integration.sh ]; then
              ./demo-guix-vendor-integration.sh || echo "‚ö†Ô∏è Manual vendoring completed with warnings"
            fi
          fi

      # Validate Guix Package Building (before traditional builds)
      - name: Validate Guix Package Building
        run: |
          echo "üîß Testing Guix package building capability..."
          
          if command -v guix &> /dev/null; then
            echo "üì¶ Testing guix.scm build recipe..."
            
            # Test if guix.scm can build (dry-run)
            guix build -f guix.scm --dry-run || echo "‚ö†Ô∏è Guix build test failed"
            
            echo "üß† Testing cognitive-manifest.scm..."
            guix install --dry-run -m cognitive-manifest.scm || echo "‚ö†Ô∏è Manifest test failed"
          else
            echo "‚ö†Ô∏è Guix not available, skipping package validation"
          fi
          
          echo "‚úÖ Package validation completed"

      # 02. Build and Install cogutil (vendored)
      - name: Build and Install cogutil (vendored)
        run: |
          echo "üîß Building vendored cogutil..."
          
          # Use vendored cogutil instead of repos/cogutil
          if [ -d "cogutil" ]; then
            cd cogutil
            echo "‚úÖ Using vendored cogutil"
          else
            cd repos/cogutil
            echo "‚ö†Ô∏è Falling back to repos/cogutil"
          fi
          
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 03. Build and Install atomspace
      - name: Build and Install atomspace
        run: |
          cd repos/atomspace
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 04. Build and Install atomSpace-storage
      - name: Build and Install atomSpace-storage
        run: |
          cd repos/atomspace-storage
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 05. Build and Install atomspace-rocks
      - name: Build and Install atomspace-rocks
        run: |
          cd repos/atomspace-rocks
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 06. Build and Install atomspace-restful
      - name: Build and Install atomspace-restful
        run: |
          cd repos/atomspace-restful
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 07. Build and Install cogserver
      - name: Build and Install cogserver
        run: |
          cd repos/cogserver
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 08. Build and Install unify
      - name: Build and Install unify
        run: |
          cd repos/unify
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 09. Build and Install ure
      - name: Build and Install ure
        run: |
          cd repos/ure
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 10. Build and Install spacetime
      - name: Build and Install spacetime
        run: |
          cd repos/spacetime
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 11. Build and Install attention
      - name: Build and Install attention
        run: |
          cd repos/attention
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 12. Build and Install miner
      - name: Build and Install miner
        run: |
          cd repos/miner
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 13. Build and Install pln
      - name: Build and Install pln
        run: |
          cd repos/pln
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 14. Build and Install moses
#      - name: Build and Install moses
#        run: |
#          cd repos/moses
#          mkdir -p lib
#          mkdir -p build
#          cd build
#          cmake .. -DCMAKE_BUILD_TYPE=Release
#          make -j$(nproc)
#          sudo make install
#          sudo ldconfig
#          cd ../../..

      # 15. Build and Install asmoses
      - name: Build and Install asmoses
        run: |
          cd repos/asmoses
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 16. Build and Install lg-atomese
      - name: Build and Install lg-atomese
        run: |
          cd repos/lg-atomese
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 17. Build and Install learn
      - name: Build and Install learn
        run: |
          cd repos/learn
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 18. Build and Install pattern-index
#      - name: Build and Install pattern-index
#        run: |
#          cd repos/pattern-index
#          mkdir -p lib
#          mkdir -p build
#          cd build
#          cmake .. -DCMAKE_BUILD_TYPE=Release
#          make -j$(nproc)
#          sudo make install
#          sudo ldconfig
#          cd ../../..

      # 19. Build and Install vision
      - name: Build and Install vision
        run: |
          cd repos/vision
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # 20. Build and Install opencog
      - name: Build and Install opencog
        run: |
          cd repos/opencog
          mkdir -p lib
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../../..

      # Final Validation: Confirm Guix/Shepherd Integration
      - name: Final Validation - Guix/Shepherd Integration
        run: |
          echo "üéØ Final validation of Guix/Shepherd integration..."
          
          # Re-run the validation script to confirm improvements
          ./validate-ocguix-workflow.sh || echo "‚ö†Ô∏è Some validation items remain"
          
          # Test if packages were built successfully
          echo "üìä Build validation summary:"
          echo "   - Vendored cogutil: $([ -d cogutil ] && echo "‚úÖ Present" || echo "‚ùå Missing")"
          echo "   - Guix available: $(command -v guix >/dev/null && echo "‚úÖ Available" || echo "‚ùå Not available")"
          echo "   - Shepherd config: $([ -f .config/shepherd/init.scm ] && echo "‚úÖ Present" || echo "‚ùå Missing")"
          
          # Create cognitive report
          echo "üß† Cognitive Build Report:" > cognitive-build-report.txt
          echo "Timestamp: $(date)" >> cognitive-build-report.txt
          echo "Guix Integration: $(command -v guix >/dev/null && echo "Active" || echo "Inactive")" >> cognitive-build-report.txt
          echo "Shepherd Services: $([ -f .config/shepherd/init.scm ] && echo "Configured" || echo "Not configured")" >> cognitive-build-report.txt
          echo "Vendored Dependencies: $([ -d cogutil ] && echo "Present" || echo "Missing")" >> cognitive-build-report.txt
          
          echo "‚úÖ Final validation completed"

      # Upload Cognitive Build Report
      - name: Upload Cognitive Build Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-build-report
          path: cognitive-build-report.txt

      # 21. Build and Install koboldcpp
#      - name: Build and Install koboldcpp
#        run: |
#          cd repos/koboldcpp
#          mkdir -p lib
#          mkdir -p build
#          cd build
#          cmake .. -DCMAKE_BUILD_TYPE=Release
#          make -j$(nproc)
#          sudo make install
#          sudo ldconfig
#          cd ../../..

      # (Optional) Package Components
#      - name: Package Components
#        if: github.ref == 'refs/heads/main'
#        run: |
          # cogutil Packaging
#          cd repos/cogutil/build
#          make package || echo "cogutil package target not defined."
#          cd ../../..

          # atomspace Packaging
#          cd repos/atomspace/build
#          make package || echo "atomspace package target not defined."
#          cd ../../..

          # atomspace-storage Packaging
 #         cd repos/atomspace-storage/build
 #         make package || echo "atomspace-storage package target not defined."
 #         cd ../../..

          # atomspace-rocks Packaging
 #         cd repos/atomspace-rocks/build
 #         make package || echo "atomspace-rocks package target not defined."
 #         cd ../../..

          # atomspace-restful Packaging
#          cd repos/atomspace-restful/build
#          make package || echo "atomspace-restful package target not defined."
#          cd ../../..

          # cogserver Packaging
#          cd repos/cogserver/build
#          make package || echo "cogserver package target not defined."
#          cd ../../..

          # unify Packaging
#          cd repos/unify/build
#          make package || echo "unify package target not defined."
#          cd ../../..

          # ure Packaging
#          cd repos/ure/build
#          make package || echo "ure package target not defined."
#          cd ../../..

          # spacetime Packaging
#          cd repos/spacetime/build
#          make package || echo "spacetime package target not defined."
#          cd ../../..

          # attention Packaging
#          cd repos/attention/build
#          make package || echo "attention package target not defined."
#          cd ../../..

          # miner Packaging
#          cd repos/miner/build
#          make package || echo "miner package target not defined."
#          cd ../../..

          # pln Packaging
#          cd repos/pln/build
#          make package || echo "pln package target not defined."
#          cd ../../..

          # moses Packaging
#          cd repos/moses/build
#          make package || echo "moses package target not defined."
#          cd ../../..

          # asmoses Packaging
#          cd repos/asmoses/build
#          make package || echo "asmoses package target not defined."
#          cd ../../..

          # lg-atomese Packaging
#          cd repos/lg-atomese/build
#          make package || echo "lg-atomese package target not defined."
#          cd ../../..

          # learn Packaging
#          cd repos/learn/build
#          make package || echo "learn package target not defined."
#          cd ../../..

          # pattern-index Packaging
#          cd repos/pattern-index/build
#          make package || echo "pattern-index package target not defined."
#          cd ../../..

          # vision Packaging
#          cd repos/vision/build
#          make package || echo "vision package target not defined."
#          cd ../../..

          # opencog Packaging
#          cd repos/opencog/build
#          make package || echo "opencog package target not defined."
#          cd ../../..

      # Upload Build Artifacts
#      - name: Upload Build Artifacts
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: build-artifacts
#          path: |
#            repos/cogutil/build/
#            repos/atomspace/build/
#            repos/atomspace-storage/build/
#            repos/atomspace-rocks/build/
#            repos/atomspace-restful/build/
#            repos/cogserver/build/
#            repos/unify/build/
#            repos/ure/build/
#            repos/spacetime/build/
#            repos/attention/build/
#            repos/miner/build/
#            repos/pln/build/
#            repos/moses/build/
#            repos/asmoses/build/
#            repos/lg-atomese/build/
#            repos/learn/build/
#            repos/pattern-index/build/
#            repos/vision/build/
#            repos/opencog/build/
