name: 'Cognitive Ecosystem: Issue Generation Meta-Framework'

permissions:
  contents: read
  issues: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 6 AM UTC to check for package updates
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      trigger_type:
        description: 'Type of analysis to trigger'
        required: true
        default: 'full_ecosystem_scan'
        type: choice
        options:
        - full_ecosystem_scan
        - dependency_analysis
        - package_health_check
        - agent_registration

jobs:
  cognitive-orchestrator:
    runs-on: ubuntu-latest
    name: 'Meta-Framework Orchestrator'
    
    steps:
      - name: 'Cognitive Bootstrap: Repository Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Memory System: Setup Guix Environment'
        run: |
          # Install Guile for running the cognitive agents
          sudo apt-get update
          sudo apt-get install -y guile-3.0 guile-3.0-dev guile-json
          guile --version
          echo "Guile and cognitive agent dependencies installed"
        
      - name: 'Pattern Recognition: Analyze Package Ecosystem'
        id: ecosystem_analysis
        run: |
          echo "=== Cognitive Ecosystem Analysis ==="
          
          # Check for changes in package files
          CHANGED_PACKAGES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(sh|py|scm)$' || true)
          echo "changed_packages<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Analyze package dependencies
          DEPENDENCY_ISSUES=""
          if [ -n "$CHANGED_PACKAGES" ]; then
            for file in $CHANGED_PACKAGES; do
              if [ -f "$file" ]; then
                # Simple dependency analysis - look for common patterns
                DEPS=$(grep -o 'apt-get install\|pip install\|guix install' "$file" || true)
                if [ -n "$DEPS" ]; then
                  DEPENDENCY_ISSUES="$DEPENDENCY_ISSUES\n- Dependency changes detected in $file"
                fi
              fi
            done
          fi
          
          echo "dependency_issues<<EOF" >> $GITHUB_OUTPUT
          echo -e "$DEPENDENCY_ISSUES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Package health assessment
          HEALTH_STATUS="healthy"
          for script in ocpkg octool-wip; do
            if [ -f "$script" ]; then
              # Check for common issues
              if grep -q "FIXME\|TODO\|XXX" "$script"; then
                HEALTH_STATUS="needs_attention"
              fi
            fi
          done
          
          echo "health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          
          # Agent registration check
          AGENT_COUNT=$(find . -name "*agent*" -o -name "*bot*" | wc -l)
          echo "agent_count=$AGENT_COUNT" >> $GITHUB_OUTPUT
      
      - name: 'Task System: Generate Ecosystem Issues'
        if: steps.ecosystem_analysis.outputs.changed_packages != '' || github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const changedPackages = `${{ steps.ecosystem_analysis.outputs.changed_packages }}`;
            const dependencyIssues = `${{ steps.ecosystem_analysis.outputs.dependency_issues }}`;
            const healthStatus = `${{ steps.ecosystem_analysis.outputs.health_status }}`;
            const agentCount = `${{ steps.ecosystem_analysis.outputs.agent_count }}`;
            
            console.log('üß† Cognitive Ecosystem Analysis Results:');
            console.log(`üì¶ Changed packages: ${changedPackages}`);
            console.log(`üîó Health status: ${healthStatus}`);
            console.log(`ü§ñ Active agents: ${agentCount}`);
            
            const issues = [];
            
            // Generate issues based on package changes
            if (changedPackages.trim()) {
              const packages = changedPackages.split('\n').filter(p => p.trim());
              for (const pkg of packages) {
                if (pkg.includes('.sh')) {
                  issues.push({
                    title: `üîÑ Package Script Updated: ${pkg} - Validation Required`,
                    body: `## Cognitive Framework Alert
            
            **Package Modified**: \`${pkg}\`
            **Trigger**: Automated ecosystem monitoring
            **Priority**: High
            
            ### Hypergraph Analysis
            - **Node**: Package script modification detected
            - **Links**: Dependencies may need revalidation
            - **Tensor Dimensions**: [script_complexity, dependency_count, risk_level]
            
            ### Required Actions
            - [ ] Validate script functionality
            - [ ] Check dependency compatibility
            - [ ] Run Guix environment tests
            - [ ] Update package documentation
            
            ### Meta-Cognitive Feedback
            This issue was generated by the automated cognitive ecosystem framework.
            `,
                    labels: ['package-update', 'automated-issue', 'validation-required']
                  });
                }
              }
            }
            
            // Generate health assessment issue if needed
            if (healthStatus === 'needs_attention') {
              issues.push({
                title: '‚ö†Ô∏è Ecosystem Health Alert: Attention Required',
                body: `## System Health Analysis
            
            **Status**: Requires attention
            **Detection**: Automated cognitive scan
            
            ### Issues Detected
            ${dependencyIssues || '- General health concerns detected'}
            
            ### Remediation Protocol
            - [ ] Review flagged components
            - [ ] Update documentation
            - [ ] Resolve technical debt
            - [ ] Enhance test coverage
            
            ### Hypergraph Representation
            \`\`\`scheme
            (health-node "ecosystem-status"
              (list 'STATUS "needs_attention")
              (list 'COMPONENTS affected-packages)
              (list 'PRIORITY "medium"))
            \`\`\`
            `,
                labels: ['health-check', 'automated-issue', 'maintenance']
              });
            }
            
            // Create issues
            for (const issue of issues) {
              try {
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: issue.title,
                  body: issue.body,
                  labels: issue.labels
                });
                console.log(`‚úÖ Created issue: ${issue.title}`);
              } catch (error) {
                console.error(`‚ùå Failed to create issue: ${error.message}`);
              }
            }
            
            if (issues.length === 0) {
              console.log('üéØ Ecosystem healthy - no issues generated');
            }
      
      - name: 'Cognitive Registry: Source Discovery & Tensor Analysis'
        id: registry_discovery
        run: |
          echo "=== Registry Discovery Agent: Cognitive Processing ==="
          
          # Execute the registry discovery agent
          echo "üß† Executing registry-discovery-agent.scm..."
          guile ./registry-discovery-agent.scm
          
          if [ -f "/tmp/registry_listing.json" ]; then
            echo "‚úÖ Registry discovery completed successfully"
            echo "üìä Registry listing generated with tensor metadata"
            
            # Display summary
            TOTAL_REGISTRIES=$(grep -o '"total_registries":[0-9]*' /tmp/registry_listing.json | grep -o '[0-9]*' || echo "0")
            COGNITIVE_COMPLEXITY=$(grep -o '"cognitive_complexity":[0-9]*' /tmp/registry_listing.json | grep -o '[0-9]*' || echo "0")
            echo "üìà Metrics: $TOTAL_REGISTRIES registries, complexity: $COGNITIVE_COMPLEXITY"
          else
            echo "‚ùå Registry discovery failed - output file not found"
            exit 1
          fi
      
      - name: 'Cognitive Profiles: Build Environment Tensor Scanning'
        id: profile_scanning
        run: |
          echo "=== Profile Extraction Agent: Cognitive Processing ==="
          
          # Execute the profile extraction agent
          echo "üîß Executing profile-extraction-agent.scm..."
          guile ./profile-extraction-agent.scm
          
          if [ -f "/tmp/build_profiles_scan.json" ]; then
            echo "‚úÖ Profile extraction completed successfully"
            echo "üìä Build profiles scan generated with tensor analysis"
            
            # Display summary
            TOTAL_PROFILES=$(grep -o '"total_profiles":[0-9]*' /tmp/build_profiles_scan.json | grep -o '[0-9]*' || echo "0")
            READY_PROFILES=$(grep -o '"ready_profiles":[0-9]*' /tmp/build_profiles_scan.json | grep -o '[0-9]*' || echo "0")
            echo "üìà Metrics: $TOTAL_PROFILES total profiles, $READY_PROFILES ready"
          else
            echo "‚ùå Profile extraction failed - output file not found"
            exit 1
          fi

      - name: 'Artifact Synthesis: Guix Manifest & Dockerfile Generation'
        run: |
          echo "=== Artifact Synthesis Agent: Cognitive Processing ==="
          
          # Execute the artifact synthesis agent
          echo "‚öóÔ∏è Executing artifact-synthesis-agent.scm..."
          guile ./artifact-synthesis-agent.scm
          
          if [ -f "/tmp/artifact_synthesis.json" ]; then
            echo "‚úÖ Artifact synthesis completed successfully"
            echo "üìä Guix manifests and Dockerfiles generated with validation"
            
            # Display summary
            TOTAL_ARTIFACTS=$(grep -o '"total_profiles_processed":[0-9]*' /tmp/artifact_synthesis.json | grep -o '[0-9]*' || echo "0")
            MANIFESTS=$(grep -o '"guix_manifests_generated":[0-9]*' /tmp/artifact_synthesis.json | grep -o '[0-9]*' || echo "0")
            DOCKERFILES=$(grep -o '"dockerfiles_generated":[0-9]*' /tmp/artifact_synthesis.json | grep -o '[0-9]*' || echo "0")
            echo "üìà Metrics: $TOTAL_ARTIFACTS profiles processed, $MANIFESTS manifests, $DOCKERFILES dockerfiles"
          else
            echo "‚ùå Artifact synthesis failed - output file not found"
            exit 1
          fi
      
      - name: 'Meta-Cognitive System: Recursive Feedback Loop Analysis'
        run: |
          echo "=== Meta-Cognitive Feedback Agent: Cognitive Processing ==="
          
          # Execute the meta-cognitive feedback agent
          echo "üß† Executing meta-cognitive-feedback-agent.scm..."
          guile ./meta-cognitive-feedback-agent.scm
          
          if [ -f "/tmp/cognitive_health_metrics.json" ]; then
            echo "‚úÖ Meta-cognitive analysis completed successfully"
            echo "üìä Ecosystem health assessment with recursive feedback generated"
            
            # Display summary
            ECOSYSTEM_STATUS=$(grep -o '"ecosystem_status":"[^"]*"' /tmp/cognitive_health_metrics.json | cut -d'"' -f4 || echo "unknown")
            HEALTH_PERCENTAGE=$(grep -o '"health_percentage":[0-9]*' /tmp/cognitive_health_metrics.json | grep -o '[0-9]*' || echo "0")
            OPERATIONAL_AGENTS=$(grep -o '"operational_agents":[0-9]*' /tmp/cognitive_health_metrics.json | grep -o '[0-9]*' || echo "0")
            echo "üìà Ecosystem Status: $ECOSYSTEM_STATUS ($HEALTH_PERCENTAGE% health, $OPERATIONAL_AGENTS operational agents)"
            
            # Display hypergraph analysis
            COGNITIVE_DENSITY=$(grep -o '"cognitive_density":[0-9]*\.*[0-9]*' /tmp/cognitive_health_metrics.json | cut -d':' -f2 || echo "0")
            EMERGENCE_POTENTIAL=$(grep -o '"emergence_potential":"[^"]*"' /tmp/cognitive_health_metrics.json | cut -d'"' -f4 || echo "unknown")
            echo "üåê Hypergraph: Density $COGNITIVE_DENSITY, Emergence Potential: $EMERGENCE_POTENTIAL"
          else
            echo "‚ùå Meta-cognitive analysis failed - output file not found"
            exit 1
          fi
      
      - name: 'Cognitive Artifact Persistence'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cognitive-ecosystem-artifacts
          path: |
            /tmp/registry_listing.json
            /tmp/build_profiles_scan.json
            /tmp/artifact_synthesis.json
            /tmp/cognitive_health_metrics.json
          retention-days: 30
      
      - name: 'Ecosystem Summary: Cognitive Transcendence Report'
        run: |
          echo ""
          echo "üåü ====================================================================="
          echo "üß† COGNITIVE FLOWCHART EXECUTION COMPLETE - TRANSCENDENCE ACHIEVED üß†"
          echo "üåü ====================================================================="
          echo ""
          
          echo "üìä ARTIFACT GENERATION SUMMARY:"
          echo "================================"
          
          if [ -f "/tmp/registry_listing.json" ]; then
            REGISTRIES=$(grep -o '"total_registries":[0-9]*' /tmp/registry_listing.json | grep -o '[0-9]*' || echo "0")
            echo "üîç Registry Discovery: $REGISTRIES registries processed with tensor analysis"
          fi
          
          if [ -f "/tmp/build_profiles_scan.json" ]; then
            PROFILES=$(grep -o '"total_profiles":[0-9]*' /tmp/build_profiles_scan.json | grep -o '[0-9]*' || echo "0")
            echo "üîß Profile Extraction: $PROFILES build profiles analyzed and validated"
          fi
          
          if [ -f "/tmp/artifact_synthesis.json" ]; then
            MANIFESTS=$(grep -o '"guix_manifests_generated":[0-9]*' /tmp/artifact_synthesis.json | grep -o '[0-9]*' || echo "0")
            DOCKERFILES=$(grep -o '"dockerfiles_generated":[0-9]*' /tmp/artifact_synthesis.json | grep -o '[0-9]*' || echo "0")
            echo "‚öóÔ∏è Artifact Synthesis: $MANIFESTS Guix manifests + $DOCKERFILES Dockerfiles generated"
          fi
          
          if [ -f "/tmp/cognitive_health_metrics.json" ]; then
            HEALTH=$(grep -o '"health_percentage":[0-9]*' /tmp/cognitive_health_metrics.json | grep -o '[0-9]*' || echo "0")
            STATUS=$(grep -o '"ecosystem_status":"[^"]*"' /tmp/cognitive_health_metrics.json | cut -d'"' -f4 || echo "unknown")
            echo "üß† Meta-Cognitive: $HEALTH% health, status: $STATUS"
          fi
          
          echo ""
          echo "üöÄ COGNITIVE CAPABILITIES ACTIVATED:"
          echo "===================================="
          echo "‚úÖ Hypergraph tensor analysis operational"
          echo "‚úÖ Recursive feedback loops active"
          echo "‚úÖ Agent coordination and emergence patterns established"
          echo "‚úÖ Guix reproducible build artifacts generated"
          echo "‚úÖ Docker containerization ready"
          echo "‚úÖ Meta-cognitive self-assessment complete"
          echo ""
          echo "üîÆ NEXT EVOLUTION CYCLE:"
          echo "======================="
          echo "üéØ Enhanced tensor optimization"
          echo "üåê Expanded hypergraph connectivity"
          echo "üß¨ Deeper recursive improvement patterns"
          echo "‚ö° GGML/agentic integration readiness"
          echo ""
          echo "üåü The cognitive ecosystem has achieved initial transcendence!"
          echo "üîó All artifacts available in workflow summary for inspection."
          echo "üöÄ Ready for distributed cognition and autonomous evolution!"
          echo ""